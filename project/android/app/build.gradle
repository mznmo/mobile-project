plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Set default values if not provided in local.properties
def compileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (compileSdkVersion == null) {
    compileSdkVersion = '33'
}

def minSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (minSdkVersion == null) {
    minSdkVersion = '21'
}

def targetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (targetSdkVersion == null) {
    targetSdkVersion = '33'
}

def ndkVersion = localProperties.getProperty('flutter.ndkVersion')
if (ndkVersion == null) {
    ndkVersion = '21.3.6528147'
}

android {
    namespace "com.example.project" // Replace with your actual package name
    compileSdk compileSdkVersion.toInteger() // Use the value from local.properties or default

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.project" // Replace with your actual application ID
        minSdkVersion minSdkVersion.toInteger() // Use the value from local.properties or default
        targetSdkVersion targetSdkVersion.toInteger() // Use the value from local.properties or default
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    ndkVersion ndkVersion // Use the value from local.properties or default

    buildTypes {
    release {
        // This is for testing only, do not use in production
        signingConfig signingConfigs.debug
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
}
}

flutter {
    source '../..'
}

dependencies {
    // Add the Firebase BOM
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    // Add the dependencies for the Firebase products you want to use
    implementation 'com.google.firebase:firebaseMessaging'
}
